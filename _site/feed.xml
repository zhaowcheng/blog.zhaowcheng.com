

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>zhaowcheng</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-09-04T16:25:18+08:00</updated>
  <author>
    <name>zhaowcheng</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 zhaowcheng </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>国产操作系统和 CPU 分类</title>
    <link href="http://localhost:4000/posts/classification-of-chinese-os-and-cpu/" rel="alternate" type="text/html" title="国产操作系统和 CPU 分类" />
    <published>2022-09-04T15:32:00+08:00</published>
  
    <updated>2022-09-04T15:32:00+08:00</updated>
  
    <id>http://localhost:4000/posts/classification-of-chinese-os-and-cpu/</id>
    <content src="http://localhost:4000/posts/classification-of-chinese-os-and-cpu/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="杂七杂八" />
    
  

  
    <summary>
      





      国产 操作系统 和 CPU 厂商数量繁多，令人眼花缭乱，如果你做一款 C/C++ 软件需要适配国产的各种操作系统和 CPU，打包时针对每一种操作系统和 CPU 的组合都要打一个包的话，那么每一次打包的数量可能会多达数十个，光是编译环境的准备都需要耗费大量的时间，这无疑是令人难以接受的。

但是万变不离其宗，如果经过仔细分析的话，会发现这些操作系统和 CPU 都是从现有的体系中衍生出来的，而不是完全新生事物，比如操作系统都是基于 Linux 的，且按照系统自带的包管理软件的不同，可以分为 2 个系列，分别是使用 rpm 的 redhat 系 和使用 dpkg 的 debian 系，适用于它们的安装包格式分别是 rpm 和 deb。CPU 按照指令架构划分，则可以分为 x86_64、aarch64、mips64el、loongarch64、sw_64 这 5 类，由于叫法的不同，有的会把...
    </summary>
  

  </entry>

  
  <entry>
    <title>一种让 Linux 上的 C/C++ 程序自带依赖库的打包方式</title>
    <link href="http://localhost:4000/posts/a-packaging-method-with-its-own-deps/" rel="alternate" type="text/html" title="一种让 Linux 上的 C/C++ 程序自带依赖库的打包方式" />
    <published>2022-09-03T15:34:00+08:00</published>
  
    <updated>2022-09-03T15:34:00+08:00</updated>
  
    <id>http://localhost:4000/posts/a-packaging-method-with-its-own-deps/</id>
    <content src="http://localhost:4000/posts/a-packaging-method-with-its-own-deps/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="杂七杂八" />
    
  

  
    <summary>
      





      Linux 上的 C/C++ 程序编译打包后拿到 同 CPU 架构 的其他 Linux 系统上运行时，通常会由于目标系统上缺少该程序所需的库而无法运行。

这个问题在一个连接上互联网的 Linux 系统上可以很容易的通过 yum 或 apt 安装缺少的依赖库来解决，但是如果是在一个无法使用 yum 和 apt 的内网系统上，则非常麻烦。

本文介绍一种打包方式，让打包后的程序即使在目标系统上没有该程序所需的库时，也能正常运行。

步骤

以下为该方式的详细步骤：

第一步：编译平台的选择

选择一个 libc 版本 小于等于 该程序需要适配的所有系统中 libc 版本最小的系统。

比如该程序需要适配 2 个系统，这两个系统的 libc 版本分别为 2.23 和 2.28，则选择一个 libc 版本 小于等于 2.23 的系统作为编译平台。

第二步：拷贝依赖库

在编译完成后，打包...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-12-模块和包</title>
    <link href="http://localhost:4000/posts/python-tutorial-12-modules-and-packages/" rel="alternate" type="text/html" title="Python 入门-12-模块和包" />
    <published>2022-03-10T15:16:00+08:00</published>
  
    <updated>2022-03-17T15:34:26+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-12-modules-and-packages/</id>
    <content src="http://localhost:4000/posts/python-tutorial-12-modules-and-packages/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      模块（module）

一个包含 Python 代码的 .py 文件就是一个 模块（module），文件名去除 .py 后缀就是 模块名，模块名也可以通过模块的 __name__ 属性获取。

一个模块可以被 import 引用，也可以当作脚本直接运行，模块中的 定义 和 语句 只在被 import 或直接运行的时候 执行一次。

例如现在有一个名为 fibo.py 的文件，其内容如下：

def fib(n):
    a, b = 0, 1
    while b &amp;lt; n:
        print(b, end=' ')
        a, b = b, a+b
    print()

def fib2(n):
    result = []
    a, b = 0, 1
    while b &amp;lt; n:
        result.append(b)
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-11-类</title>
    <link href="http://localhost:4000/posts/python-tutorial-11-classes/" rel="alternate" type="text/html" title="Python 入门-11-类" />
    <published>2022-02-24T11:05:00+08:00</published>
  
    <updated>2022-03-09T17:26:02+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-11-classes/</id>
    <content src="http://localhost:4000/posts/python-tutorial-11-classes/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      Python 类源自于 C++ 和 Modula-3 这两种语言的类机制的结合。
Python 中一切皆 对象（Object），类里边又引入了 3 种对象：类对象（Class）、实例对象（Instance） 和 方法对象（Method）

作用域和命名空间

作用域（scope） 指的是 Python 代码中的一个文本区域，分为以下几类：


  模块
  类
  函数


命名空间（namespace） 是一个名字到对象的映射，一个作用域对应会有一个命名空间来保存该作用域中的 名称（name），Python 中按照以下顺序去查找一个名称：


  最内部作用域的命名空间（包含局部名称）
  最内部作用域与最近的作用域之间的 中间作用域 的命名空间（包含非全局名称 nonlocal）
  当前模块的命名空间（包含全局名称 global）
  内置名称模块（builtins）的命名空间...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-10-异常</title>
    <link href="http://localhost:4000/posts/python-tutorial-10-exceptions/" rel="alternate" type="text/html" title="Python 入门-10-异常" />
    <published>2022-02-11T14:12:00+08:00</published>
  
    <updated>2022-02-11T14:12:00+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-10-exceptions/</id>
    <content src="http://localhost:4000/posts/python-tutorial-10-exceptions/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      异常简介

异常（Exception） 即程序执行过程中产生的预期以外的错误，例如有一个脚本 test.py，其内容如下：

#!/bin/python3

print('2' + 2)


当执行该脚本时会产生如下异常：

[root@localhost ~] python3 test.py 
Traceback (most recent call last):
  File "test.py", line 3, in &amp;lt;module&amp;gt;
    print('2' + 2)
TypeError: can only concatenate str (not "int") to str


上面打印的内容称为 异常栈，以 File 开头的那一行指明了产生异常的位置（即 test.py 的第 3 行），接下来一行即产生异常的语句（即 print(‘2’ + 2)），最后一行为...
    </summary>
  

  </entry>

</feed>


