

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>zhaowcheng</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-03-17T15:16:19+08:00</updated>
  <author>
    <name>zhaowcheng</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 zhaowcheng </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Python 入门-12-模块和包</title>
    <link href="http://localhost:4000/posts/python-tutorial-12-modules-and-packages/" rel="alternate" type="text/html" title="Python 入门-12-模块和包" />
    <published>2022-03-17T15:16:00+08:00</published>
  
    <updated>2022-03-17T15:16:00+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-12-modules-and-packages/</id>
    <content src="http://localhost:4000/posts/python-tutorial-12-modules-and-packages/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      模块（module）

一个包含 Python 代码的 .py 文件就是一个 模块（module），文件名去除 .py 后缀就是 模块名，模块名也可以通过模块的 __name__ 属性获取。

一个模块可以被 import 引用，也可以当作脚本直接运行，模块中的 定义 和 语句 只在被 import 或直接运行的时候 执行一次。

例如现在有一个名为 fibo.py 的文件，其内容如下：

def fib(n):
    a, b = 0, 1
    while b &amp;lt; n:
        print(b, end=' ')
        a, b = b, a+b
    print()

def fib2(n):
    result = []
    a, b = 0, 1
    while b &amp;lt; n:
        result.append(b)
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-11-类</title>
    <link href="http://localhost:4000/posts/python-tutorial-11-classes/" rel="alternate" type="text/html" title="Python 入门-11-类" />
    <published>2022-02-24T11:05:00+08:00</published>
  
    <updated>2022-03-09T17:26:02+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-11-classes/</id>
    <content src="http://localhost:4000/posts/python-tutorial-11-classes/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      Python 类源自于 C++ 和 Modula-3 这两种语言的类机制的结合。
Python 中一切皆 对象（Object），类里边又引入了 3 种对象：类对象（Class）、实例对象（Instance） 和 方法对象（Method）

作用域和命名空间

作用域（scope） 指的是 Python 代码中的一个文本区域，分为以下几类：


  模块
  类
  函数


命名空间（namespace） 是一个名字到对象的映射，一个作用域对应会有一个命名空间来保存该作用域中的 名称（name），Python 中按照以下顺序去查找一个名称：


  最内部作用域的命名空间（包含局部名称）
  最内部作用域与最近的作用域之间的 中间作用域 的命名空间（包含非全局名称 nonlocal）
  当前模块的命名空间（包含全局名称 global）
  内置名称模块（builtins）的命名空间...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-10-异常</title>
    <link href="http://localhost:4000/posts/python-tutorial-10-exceptions/" rel="alternate" type="text/html" title="Python 入门-10-异常" />
    <published>2022-02-11T14:12:00+08:00</published>
  
    <updated>2022-02-11T14:12:00+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-10-exceptions/</id>
    <content src="http://localhost:4000/posts/python-tutorial-10-exceptions/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      异常简介

异常（Exception） 即程序执行过程中产生的预期以外的错误，例如有一个脚本 test.py，其内容如下：

#!/bin/python3

print('2' + 2)


当执行该脚本时会产生如下异常：

[root@localhost ~] python3 test.py 
Traceback (most recent call last):
  File "test.py", line 3, in &amp;lt;module&amp;gt;
    print('2' + 2)
TypeError: can only concatenate str (not "int") to str


上面打印的内容称为 异常栈，以 File 开头的那一行指明了产生异常的位置（即 test.py 的第 3 行），接下来一行即产生异常的语句（即 print(‘2’ + 2)），最后一行为...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-9-输入输出</title>
    <link href="http://localhost:4000/posts/python-tutorial-9-input-and-output/" rel="alternate" type="text/html" title="Python 入门-9-输入输出" />
    <published>2021-02-24T20:44:30+08:00</published>
  
    <updated>2022-02-07T16:41:43+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-9-input-and-output/</id>
    <content src="http://localhost:4000/posts/python-tutorial-9-input-and-output/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      终端的输入输出

input

Python 提供了一个 input 函数供终端的输入使用，当程序执行到 input 处时会暂停并等待用户输入，用户输入完成并敲击回车后才会继续执行后续的代码。input 的返回值就是读取到的用户输入内容，还可以在调用 input 时传入一个字符串参数作为等待输入的提示信息显示。

## 用 var 保存用户输入内容
&amp;gt;&amp;gt;&amp;gt; var = input()
'hello, world'
&amp;gt;&amp;gt;&amp;gt; var
'hello, world'
&amp;gt;&amp;gt;&amp;gt; 

## 等待输入时显示提示信息
&amp;gt;&amp;gt;&amp;gt; name = input('Please input your name:')
Please input your name:'tom'
&amp;gt;&amp;gt;&amp;gt; name
'tom'
&amp;gt;&amp;gt;&amp;gt...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 入门-8-函数定义</title>
    <link href="http://localhost:4000/posts/python-tutorial-8-function-definition/" rel="alternate" type="text/html" title="Python 入门-8-函数定义" />
    <published>2020-11-24T10:45:50+08:00</published>
  
    <updated>2022-02-07T16:41:43+08:00</updated>
  
    <id>http://localhost:4000/posts/python-tutorial-8-function-definition/</id>
    <content src="http://localhost:4000/posts/python-tutorial-8-function-definition/" />
    <author>
      <name>zhaowcheng</name>
    </author>

  
    
    <category term="Python 入门" />
    
  

  
    <summary>
      





      函数定义

先看一个简单的函数定义的例子，以 def 语句开头，定义一个名为 add 的函数，接收两个参数 a 和 b，然后返回这两个参数的 和：

&amp;gt;&amp;gt;&amp;gt; def add(a, b):
...     return a + b
...
&amp;gt;&amp;gt;&amp;gt; add(1, 2)
3
&amp;gt;&amp;gt;&amp;gt;


在 Python 中，一个定义好的函数可以把函数名赋值给其他变量，然后通过其他变量也可以调用该函数：

&amp;gt;&amp;gt;&amp;gt; def add(a, b):
...     return a + b
...
&amp;gt;&amp;gt;&amp;gt; plus = add
&amp;gt;&amp;gt;&amp;gt; plus(1, 2)
3
&amp;gt;&amp;gt;&amp;gt;


如果定义的函数体中没有明确使用 return 语句返回值，那么默认返回值是 None：

&amp;gt;&amp;gt;&amp;gt; d...
    </summary>
  

  </entry>

</feed>


