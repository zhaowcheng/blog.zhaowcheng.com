<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://zhaowcheng.com/</id><title>zhaowcheng</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2025-07-12T10:49:42+08:00</updated> <author> <name>zhaowcheng</name> <uri>https://zhaowcheng.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://zhaowcheng.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://zhaowcheng.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2025 zhaowcheng </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>GLIBC 与 Linux 内核的兼容性</title><link href="https://zhaowcheng.com/posts/compatibility-glibc-and-linux-kernel/" rel="alternate" type="text/html" title="GLIBC 与 Linux 内核的兼容性" /><published>2025-07-12T10:19:00+08:00</published> <updated>2025-07-12T10:19:00+08:00</updated> <id>https://zhaowcheng.com/posts/compatibility-glibc-and-linux-kernel/</id> <content src="https://zhaowcheng.com/posts/compatibility-glibc-and-linux-kernel/" /> <author> <name>zhaowcheng</name> </author> <category term="Linux 打包" /> <summary> 根据 glibc 的 release history 整理出自 2.17 以来的版本与 linux 内核版本的兼容性： glibc 版本 兼容的 linux 内核版本 2.17 ~ 2.19 &amp;gt;= 2.6.16 2.20 ~ 2.23 &amp;gt;= 2.6.32 2.24 ~ 2.25 运行时：x86 上要求 &amp;gt;= 2.6.32，其他架构要求 &amp;gt;= 3.2；编译时：所有架构都要求内核头文件版本 &amp;gt;= 3.2 2.26 ~ 2.41 &amp;gt;= 3.2 </summary> </entry> <entry><title>PostgreSQL 配置说明</title><link href="https://zhaowcheng.com/posts/postgresql-configuration/" rel="alternate" type="text/html" title="PostgreSQL 配置说明" /><published>2025-04-02T12:58:00+08:00</published> <updated>2025-04-02T12:58:00+08:00</updated> <id>https://zhaowcheng.com/posts/postgresql-configuration/</id> <content src="https://zhaowcheng.com/posts/postgresql-configuration/" /> <author> <name>zhaowcheng</name> </author> <category term="PostgreSQL" /> <summary> Preface Write Ahead Log synchronous_commit (enum) 设置事务提交时需要等到 WAL 被保存到何种程度才返回，下表描述了可设置的值及其说明（数据安全程度依次递减）： 值 说明 remote_apply 等到同步备节点回放了 WAL on 等到同步备节点把 WAL 写入了磁盘 remote_write 等到同步备节点把 WAL 写入了文件系统缓存 local 等到主节点把 WAL 写入了磁盘 off 不等待 主节点会在 WAL 写入自己的磁盘之... </summary> </entry> <entry><title>Patroni 配置说明</title><link href="https://zhaowcheng.com/posts/patroni-configuration/" rel="alternate" type="text/html" title="Patroni 配置说明" /><published>2025-03-27T18:58:00+08:00</published> <updated>2025-03-27T18:58:00+08:00</updated> <id>https://zhaowcheng.com/posts/patroni-configuration/</id> <content src="https://zhaowcheng.com/posts/patroni-configuration/" /> <author> <name>zhaowcheng</name> </author> <category term="Patroni" /> <summary> 1 配置类型 全局配置（Global Configuration） 作用范围：所有节点。 修改方式：初始化（bootstrap）前，修改配置文件中的 bootstrap.dcs 部分；初始化后，通过 patronictl edit-config 命令或 REST 接口 /config 修改。 配置项：https://patroni.readthedocs.io/en/latest/dynamic_configuration.html#dynamic-configuration 其他说明：Patroni 官方文档中通常叫做 动态配置（dynamic configuration），初始化以后保存在 ... </summary> </entry> <entry><title>PostgreSQL 高可用（high availability)</title><link href="https://zhaowcheng.com/posts/postgresql-high-availability/" rel="alternate" type="text/html" title="PostgreSQL 高可用（high availability)" /><published>2025-03-18T22:40:00+08:00</published> <updated>2025-04-26T14:28:23+08:00</updated> <id>https://zhaowcheng.com/posts/postgresql-high-availability/</id> <content src="https://zhaowcheng.com/posts/postgresql-high-availability/" /> <author> <name>zhaowcheng</name> </author> <category term="PostgreSQL" /> <summary> 1 简介 主节点持续归档/传送 WAL，备节点持续恢复/接收 WAL 并回放（replay），以此实现一个高可用集群，这种方式叫做 log shipping，这样的备节点也叫做 warm standby，如果备节点还可以接受 只读查询，则叫做 hot standby。 PostgreSQL 支持 2 种级别的 log shipping： 文件级（file-based）：主节点配置 archive_command 持续归档 WAL 文件，备节点配置 restore_command 持续恢复 WAL 文件并回放。 记录级（record-based）： 主节点持续传送 WAL 记录，备节点持续接收 WAL 记录并回放，即 流复制（streaming replication）。 2 环境要求 硬件：主备节点之间的 CPU ... </summary> </entry> <entry><title>PostgreSQL 版本策略（versioning policy)</title><link href="https://zhaowcheng.com/posts/postgresql-version-policy/" rel="alternate" type="text/html" title="PostgreSQL 版本策略（versioning policy)" /><published>2025-03-11T21:52:00+08:00</published> <updated>2025-03-18T22:41:32+08:00</updated> <id>https://zhaowcheng.com/posts/postgresql-version-policy/</id> <content src="https://zhaowcheng.com/posts/postgresql-version-policy/" /> <author> <name>zhaowcheng</name> </author> <category term="PostgreSQL" /> <summary> 版本号 时期 格式 major minor V10 以前 X.Y.Z X.Y Z V10 及以后 X.Y X Y 周期 版本类型 发布周期 改动范围 生命周期 major 1 年 不向后兼容的重大改动和新特性等 5 年 minor 3 个月（除此外如有紧急修复，也以 minor 发布，如 17.2） 向后兼容的 bug 修复、安全修复和小幅改进等 ... </summary> </entry> </feed>
