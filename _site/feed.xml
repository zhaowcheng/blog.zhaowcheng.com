<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://zhaowcheng.com/</id><title>zhaowcheng</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2025-03-27T18:59:02+08:00</updated> <author> <name>zhaowcheng</name> <uri>https://zhaowcheng.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://zhaowcheng.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://zhaowcheng.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2025 zhaowcheng </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Patroni 配置说明</title><link href="https://zhaowcheng.com/posts/patroni-configuration/" rel="alternate" type="text/html" title="Patroni 配置说明" /><published>2025-03-27T18:58:00+08:00</published> <updated>2025-03-27T18:58:00+08:00</updated> <id>https://zhaowcheng.com/posts/patroni-configuration/</id> <content src="https://zhaowcheng.com/posts/patroni-configuration/" /> <author> <name>zhaowcheng</name> </author> <category term="Patroni" /> <summary> 1 配置类型 全局配置（Global Configuration） 作用范围：所有节点。 修改方式：初始化（bootstrap）前，修改配置文件中的 bootstrap.dcs 部分；初始化后，通过 patronictl edit-config 命令或 REST 接口 /config 修改。 配置项：https://patroni.readthedocs.io/en/latest/dynamic_configuration.html#dynamic-configuration 其他说明：Patroni 官方文档中通常叫做 动态配置（dynamic configuration），初始化以后保存在 ... </summary> </entry> <entry><title>PostgreSQL 高可用（high availability)</title><link href="https://zhaowcheng.com/posts/postgresql-high-availability/" rel="alternate" type="text/html" title="PostgreSQL 高可用（high availability)" /><published>2025-03-18T22:40:00+08:00</published> <updated>2025-03-18T22:40:00+08:00</updated> <id>https://zhaowcheng.com/posts/postgresql-high-availability/</id> <content src="https://zhaowcheng.com/posts/postgresql-high-availability/" /> <author> <name>zhaowcheng</name> </author> <category term="PostgreSQL" /> <summary> 1 简介 主节点持续归档/传送 WAL，备节点持续恢复/接收 WAL 并应用，以此实现一个高可用集群，这种方式叫做 log shipping，这样的备节点也叫做 warm standby，如果备节点接受 只读查询，则叫做 hot standby。 PostgreSQL 支持 2 种级别的 log shipping： 文件级（file-based）：主节点配置 archive_command 持续归档 WAL 文件，备节点配置 restore_command 持续恢复 WAL 文件并应用。 记录级（record-based）： 主节点持续传送 WAL 记录，备节点持续接收 WAL 记录并应用，即 流复制（streaming replication）。 2 环境要求 硬件：主备节点之间的 CPU 架构必须相同（不同架构... </summary> </entry> <entry><title>PostgreSQL 版本策略（versioning policy)</title><link href="https://zhaowcheng.com/posts/postgresql-version-policy/" rel="alternate" type="text/html" title="PostgreSQL 版本策略（versioning policy)" /><published>2025-03-11T21:52:00+08:00</published> <updated>2025-03-18T22:41:32+08:00</updated> <id>https://zhaowcheng.com/posts/postgresql-version-policy/</id> <content src="https://zhaowcheng.com/posts/postgresql-version-policy/" /> <author> <name>zhaowcheng</name> </author> <category term="PostgreSQL" /> <summary> 版本号 时期 格式 major minor V10 以前 X.Y.Z X.Y Z V10 及以后 X.Y X Y 周期 版本类型 发布周期 改动范围 生命周期 major 1 年 不向后兼容的重大改动和新特性等 5 年 minor 3 个月（除此外如有紧急修复，也以 minor 发布，如 17.2） 向后兼容的 bug 修复、安全修复和小幅改进等 ... </summary> </entry> <entry><title>使用 iptables 为 KVM 虚拟机实现桥接网络</title><link href="https://zhaowcheng.com/posts/kvm-bridge-by-iptables/" rel="alternate" type="text/html" title="使用 iptables 为 KVM 虚拟机实现桥接网络" /><published>2025-02-21T20:59:00+08:00</published> <updated>2025-02-21T20:59:00+08:00</updated> <id>https://zhaowcheng.com/posts/kvm-bridge-by-iptables/</id> <content src="https://zhaowcheng.com/posts/kvm-bridge-by-iptables/" /> <author> <name>zhaowcheng</name> </author> <category term="计算机网络" /> <summary> 适用场景 我把一台笔记本电脑安装了 Linux，准备用来作为 KVM 虚拟机服务器，这台笔记本只有无线网卡，当我想把这个无线网卡桥接到虚拟机时，始终无法成功，网上也查了很多资料，始终没有解决。 最终决定放弃桥接网络，改用 NAT 端口转发来实现外部访问虚拟机，然后参考了 Libvirt 文档 通过 iptables 配置了端口转发，用了一段时间后发现把这个配置稍加改造就可以达到和桥接网络一样的效果。 如何实现 笔记本网卡信息如下（wlp0s20f3 是无线网卡，virbr0 是安装 KVM 后自动生成的虚拟网卡）： $ ip address 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 0... </summary> </entry> <entry><title>ETCD 配置 TLS</title><link href="https://zhaowcheng.com/posts/etcd-tls/" rel="alternate" type="text/html" title="ETCD 配置 TLS" /><published>2025-01-25T19:43:00+08:00</published> <updated>2025-01-26T19:45:38+08:00</updated> <id>https://zhaowcheng.com/posts/etcd-tls/</id> <content src="https://zhaowcheng.com/posts/etcd-tls/" /> <author> <name>zhaowcheng</name> </author> <category term="ETCD" /> <summary> 前提知识： SSL/TLS 笔记 本文章演示如何在已有 ETCD 集群上同时配置开启 客户端与服务端之间（client-to-server） 和 服务端与服务端之间（server-to-server/peer） 的 TLS。 建议在操作前先备份 data 目录和配置文件！ 已有集群信息如下： $ etcdctl member list -w table +------------------+---------+-------+---------------------------+---------------------------+------------+ | ID | STATUS | NAME | PEER ADDRS | CLIENT ADDRS | IS LEARNER | ... </summary> </entry> </feed>
